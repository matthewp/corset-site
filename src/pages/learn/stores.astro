---
import { Page, Block, Code, info } from '../../components/DocPage.js';
import { Behavior, StoreRoot, StoreSet, Store, StoreGet, MDNMap, Var, FunctionContext, CustomFunction } from '../../components/Links.js';
---

<Page title="Stores">
  <Block>
    <p><strong>Stores</strong> are state containers that allow sharing state between the sheet and your JavaScript code. They solve many problems around data sharing both within a sheet, within a single <Behavior />, and for sharing state between behaviors.</p>
  </Block>
  <section>
    <h2>Concepts</h2>
    <Block>
      <p>Stores are created within a sheet using the <StoreRoot /> property. A store is given a <em>name</em>, which is referenced both within the sheet and within JavaScript to get/set values.</p>
      <p>A sheet can have multiple stores, and a store can be set on any selector (so any DOM element within the sheet). When a value is get/set within the sheet, it looks at parent elements that have the <StoreRoot /> property for that store name. This works similar as <Var /> lookup.</p>
      <Code slot="code" lang="css" code={`
#app {
  store-root: app;
}
`} />
    </Block>
    <Block>
      <p>In JavaScript a store is a <MDNMap /> that is reactive. Setting values on that map within a <Behavior /> results in that behavior being rebound.</p>
      <p>To get a store within JavaScript, get the <strong>stores</strong> property of the behavior context. The context is passed as the second argument to the behavior's constructor and bind methods.</p>
      <p>Stores created in your behavior's sheet <em>will not</em> exist the first time bind() is called, so you should protect against that using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining">optional chaining.</a></p>
      <Code slot="code" lang="js" code={`
import sheet, { mount } from '${info.cdnURL}';

mount(document, class {
  bind(props, { stores }) {
    let app = stores.get('app');
    let name = app?.get('name');

    return sheet\`
      #app {
        store-root: app;
      }

      .name {
        text: \${name};
      }
    \`;
  }
})
`} />
    </Block>
    <h3>Setting values</h3>
    <Block>
      <p>Values can be set in stores both within a sheet and in JavaScript. In both cases the parent behavior (if inside of a mount) will rebind when a value is set.</p>
    </Block>
    <Block>
      <p>To set a value in a store within the sheet you can use the <StoreSet /> property.</p>
      <p><strong>store-set</strong> takes a name of a store, and then a key and value pair within a space-separated declaration.</p>
      <Code slot="code" lang="css" code={`
#app {
  store-root: app;
}

.person {
  store-set: app name var(--name);
}
`} />
    </Block>
    <Block>
      <p>To set a value in a store within a behavior, call <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set">map.set(key, value)</a> after obtaining the store.</p>
      <Code slot="code" lang="js" code={`
import sheet, { mount } from '${info.cdnURL}';

mount(document, class {
  bind(props, { stores }) {
    const setFoo = ev => {
      stores.get('app')?.set('foo', 'bar');
    };

    return sheet\`
      #app {
        store-root: app;

        event: loaded \${setFoo};
      } 
    \`;
  }
})
`} />
    </Block>
    <h3>Getting values</h3>
    <Block>
      <p>Values can get got from a store both within a sheet and in JavaScript.</p>
    </Block>
    <Block>
      <p>To get a value from within a sheet, use the <StoreGet /> function. It takes the name of the store and the key to get.</p>
      <Code slot="code" lang="css" code={`
#app {
  store-root: app;
  store-set: app foo bar;
}

.item {
  text: store-get(app, foo);
}
`} />
    </Block>
    <Block>
      <p>To get a value within a behavior's JavaScript, use the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get">Map's get method</a>. Here the store's values are being read within an event listener.</p>
      <Code slot="code" lang="js" code={`
import sheet, { mount } from '${info.cdnURL}';

mount(document, class {
  bind(props, { stores }) {
    const updateAPI = () => {
      let foo = stores.get('app')?.get('foo');
      // call fetch() maybe.
    };

    return sheet\`
      #app {
        store-root: app;
        store-set: app foo bar;
        event: update \${updateAPI};
      }
    \`;
  }
});
`} />
    </Block>
  </section>
  <section>
    <h2>Use cases</h2>
    <p>Stores are a powerful feature of { info.project } that have many uses. The following are common scenarios where using stores makes sense.</p>
    <h3>Receiving state from a child behavior</h3>
    <Block>
      <p><Behavior plural capital /> some times create state that you would be interested in observing from the parent. This can be achieved a few other ways in { info.project } such as:</p>
      <ul>
        <li>Passing a callback function to the behavior through its <strong>inputProperties</strong>. The behavior can call the callback with data, and then the parent can trigger its rebind().</li>
        <li>Triggering an event within the child behavior. The parent behavior can listen to the event and receive data that way.</li>
      </ul>
      <p>However stores are the best option for sharing this type of data. Simply create a store within the parent sheet using <StoreRoot />. Then pass that store down using an inputProperty as you would pass any other value to a child behavior. Use <Store /> to get the store within your sheet.</p>
      <p>The child can then trigger rebinds within the parent by setting values on that store.</p>
      <Code slot="code" lang="css" code={`
#app {
  store-root: app;
}

.counter {
  --store: store(app);
  behavior: mount(counter);
}

.sibling {
  text: "Count: " store-get(app, count);
}
`} />
    </Block>
    <Block>
      <p>As the child behavior changes and sets value to the store with map.set(key, value), the parent behavior will update to reflect those changes.</p>
    </Block>
    <h3>Custom functions that reflect state changes</h3>
    <Block>
    <p>Custom functions can be a nice way to control state outside of a behavior. A custom function can create a store with the <strong>createStore</strong> function on the <FunctionContext /> and return that store. Changes will reflect back into the sheet as state changes.</p>
    <p>Here the <code>--fetch</code> <CustomFunction /> is returning a state that gets updating as the state of the fetch request changes. The sheet is able to use that state to control a class.</p>
    <p>This pattern makes it simple to express loading states in { info.project }. See <a href="https://codepen.io/matthewp/pen/qBVvZWr">the example</a> in action.</p>
    <Code slot="code" lang="css" code={`
#movies {
  --request: --fetch("/api/movies");
  --fetch-state: get(var(--request), state);
  --fetch-value: get(var(--request), value);

  /* Set a dynamic class from the fetch state */
  class-toggle: var(--fetch-state) true;
}

#movies.pending {
  text: "Loading movies";
}

#movies.resolved {
  /* Use the value once the fetch resolves */
  each: var(--fetch-value) select(#movies-template);
}
`} />
    </Block>
    <h3>Storing initial DOM data</h3>
    <Block>
      <p>Since { info.project } is a <em>progressive enhancement</em> based library, you often have values you need within your JavaScript that are initially within the DOM.</p>
      <p>A store can be used to extract those initial values and then share them within the JavaScript side. Here is an example of a counter where the initial count is stored as a data property. That property value is saved to a store, and then it can be read within event listeners.</p>
    </Block>
    <Block>
      <p>The initial DOM might look like this:</p>
      <Code slot="code" lang="html" code={`
<div id="app" data-initial="10">
  <button type="button">Increment</button>
</div>
`} />
    </Block>
    <Block>
      <p>And then the { info.project } bring it to life like this:</p>
      <Code slot="code" lang="js" code={`
import sheet, { mount } from '${info.cdnURL}';

mount(document, class {
  bind(props, { stores }) {
    const increment = () => {
      let current = stores?.get('app').get('count');
      stores?.get('app').set('count', current + 1);
    };

    return sheet\`
      #app {
        store-root: app;
        store-set: app count data(initial);
      }

      button {
        event: click \${increment};
      }
    \`;
  }
});
`} />
    </Block>
  </section>
</Page>