---
import CommonHead from '../components/CommonHead.astro';
import NavHeader from '../components/NavHeader.astro';
import Code from '../components/Code.astro';
import Footer from '../components/Footer.astro';
import { Installation } from '../components/Links.js';
import PhillipsoftLogo from '../components/sponsors/PhillipsoftLogo.astro';
import * as info from '../info.js';
import "../styles/main.css";
---

<html lang="en">
<head>
	<CommonHead />
	<title>{ info.project } - Declarative reactive UI without the complexity of SPAs</title>
	<base href=".">
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prism-theme-night-owl@1.4.0/build/style.min.css">
	<style is:global>
    decorate-element { display: none; }
	</style>
  <script>function decorate(tag,template){customElements.define(tag,class extends HTMLElement{constructor(){super();this.attachShadow({mode:"open"})}connectedCallback(){let root=this.shadowRoot;if(!root.firstChild){root.appendChild(document.importNode(template.content,true))}}})}customElements.define("decorate-element",class extends HTMLElement{connectedCallback(){let tag=this.getAttribute("tag");let template=this.firstElementChild;if(template){decorate(tag,template)}else{let mo=new MutationObserver(()=>{template=this.firstElementChild;if(template){mo.disconnect();decorate(tag,template)}});mo.observe(this,{childList:true})}}});</script>
  <link rel="preload" as="fetch" href={info.cdnWasmURL} crossorigin>
</head>
<body class="welcome">
  <PhillipsoftLogo />
	<NavHeader title={ info.project } />
	<header class="hero-header">
		<section class="hero">
			<h1 class="hero-message">
				<div>{ info.project }</div>
				<div>Cascading binding sheets</div>
			</h1>
			<p class="under-hero">Reactive UI without the complexity of <abbr title="Single-page application">SPA</abbr> frameworks. Use any backend you like; bind to the HTML you already produced.</p>
			<div class="button-list">
        <Installation class="primary button" title="Get started" />
				<a href="api/" class="button">Documentation</a>
			</div>
		</section>
	</header>
	<article class="example">
		<header>
      <h2>Bring your HTML to life.</h2>
      <p class="explanation">Corset binds JavaScript to HTML. It doesn't matter how the HTML is produced and Corset doesn't need to own your templating choice. Instead it uses a CSS-like syntax to enhance whatever you give it.</p>
    </header>

		<div class="block-wrap">
      <Code lang="html" title="HTML" code={`
<div class="counter">
  <button
    type="button"
    class="increment">Increment</button>
  <button
    type="button"
    class="decrement"
    disabled>Decrement</button>

  <div
    class="result">
    Count: <strong class="count">0</strong>
  </div>
</div>
`} />
    <Code lang="js" title="JavaScript with Corset" code={`
import sheet, { mount } from '${info.cdnURL}';

mount(document, class {
  count = 0;

  bind() {
    const { count } = this;

    return sheet\`
      .counter {
        --count: \${count};
        --inc: \${() => this.count = count + 1};
        --dec: \${() => this.count = count - 1};
      }
      
      .count {
        text: var(--count);
      }
      
      .increment {
        event: click var(--inc);
      }
      
      .decrement {
        attr-toggle: disabled \${count === 0};
        event: click var(--dec);
      }
    \`;
  }
});
`} />
		</div>

    <a href="https://codepen.io/matthewp/pen/dyVeNrJ"><em>CodePen ðŸ‘‰</em></a>
	</article>
  <hr />
  <article class="why-corset">
  	<section class="explanation">
      <h2>Expressive</h2>
      <p>Inherits from CSS syntax, providing straightfoward ways to bind to DOM for every scenario you have.</p>
    </section>
    <section class="explanation">
      <h2>Performant</h2>
      <p>Optimized to only recompute when something changes in your sheet, preventing you from worrying about performance.</p>
    </section>
    <section class="explanation">
      <h2>Decoupled</h2>
      <p>Corset is based on progressive enhancement, an industry best practice, and doesn't care or need to know how you build your backend.</p>
    </section>
  </article>
  <article class="sponsors">
    <h2>Sponsors</h2>
    <div class="sponsors-logos">
      <div class="logo"><a href="https://phillipsoft.com/"><phillipsoft-logo></phillipsoft-logo></a></div>
    </div>
  </article>
  <img class="splash-image" src={(await import('../images/splash-image.jpg')).default} />
  <Footer />
</body>
</html>
